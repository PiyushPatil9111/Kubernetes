apiVersion: app/v1
kind: Deployment
metadata:                                     #This is the metadata for the deployment file itself and in it    
    name: django-todo-deployment              # we are mentioning the app label for service.yml file to recognize it
    namespace: django-todo-app
    labels: 
      app: django-app
      env: prod
spec:
  replicas: 3                                 #Here in spec, we are mentioning our requirement of replicas
  selector:                                   #This is Selector which will find the pods with django-app label, 
    matchLabels:                              #If any pod goes down it will regenerate it
      app: django-app
  template:                                   #In template will specify Metadata for pod to be created and the
    metadata:                                 #the proper label is given in it (For Selector and label to work)
      labels: 
        app: django-app
    spec:
      initContainers:                         #THis init container sleeps fr 600 sec (which here represents some command)
        - name: mySleeperInit                 #Once 600 sleep is complete it means its fuction is done it will get deleted
          image: nginx                        #And then the main container will be created
          command:
            - "sleep"
            - "600"
      containers:
        - name: django-todo-ctrl
          image: trainwithshubham/django-todo:latest
          command: ["mkdir impAppFiles"]
          envFrom:                             #Here we specify Environment variables by referencing the config map
            - configMapRef:
                name: appdata_config
          ports:
           - containerPort: 8081
          resources:                           #Here we specify basic resource requirement and max limit for the pods
            requests:
              memory: "1Gi"
              cpu: 1
            limits:
              memory: "2Gi"
              cpu: 2          
      affinity:                                # We are using affinity to schedule pods on as specific node with the mentioned node labels and the condition 
        nodeAffinity:                                         
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: color
                operator: In
                values:
                - blue
      
